name: Master Build

on:
  pull_request:
   branches:
     - main
     ### - master    Если используете master
   types:
     - closed

jobs:
  master_build:
    runs-on: ubuntu-22.04
    if: github.event.pull_request.merged == true
    steps:
    - name: prepare ssh keys
      run: |
        ## Download ssh key to .ssh/
        mkdir -m 700 ~/.ssh
        echo -e "${{ secrets.CICD_SSH_PRIV_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        ## Allow connection to github
        cat << EOF >> ~/.ssh/config
        Host github.com
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            ForwardAgent yes
        EOF
    
    - name: clone repository
      run: git clone git@github.com:networkthor/cicd-lesson-2gr.git

    - name: get the latest tag
      run: |
        cd cicd-lesson-2gr
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "Latest tag: $latest_tag"
        echo "TAG=$latest_tag" >> $GITHUB_ENV
    
    - name: calculate new tag
      run: |
        cd cicd-lesson-2gr
        # Extract server level from PR labels
        label=$(echo "${{ toJson(github.event.pull_request.labels.*.name) }}" | grep -oE "major|minor|patch" || echo "patch")
        echo "Detected server level from label: $label"

        # Split the current tag into components
        IFS='.' read -r -a parts <<< "$TAG"
        major=${parts[0]}
        minor=${parts[1]}
        patch=${parts[2]}

        # Delete v from major version
        major="${major#v}"
        
        # Increment the appropriate version part !
        if [ "$label" == "major" ]; then
          major=$((major + 1))
          minor=0
          patch=0
        elif [ "$label" == "minor" ]; then
          minor=$((minor + 1))
          patch=0
        else
          patch=$((patch + 1))
        fi

        # Construct the new tag
        new_tag="v$major.$minor.$patch"
        echo "New tag: $new_tag"
        echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
    
    - name: build new image
      run: |
        cd cicd-lesson-2gr
        docker build -t networkthor/frontend:$NEW_TAG .
        docker images
    
    - name: login to docker registry
      run: |
        echo ${{ secrets.DOCKER_TOKEN }} | docker login -u networkthor --password-stdin
    
    - name: push image to registry
      run: |
          docker push networkthor/frontend:$NEW_TAG
    
    - name: create and push new tag
      run: |
        cd cicd-lesson-2gr
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag $NEW_TAG
        git push origin $NEW_TAG
    
    - name: send outputs to github summary
      run: |
        echo "✅ Generated new tag is $NEW_TAG!" >> $GITHUB_STEP_SUMMARY